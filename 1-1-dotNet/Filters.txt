Filters in ASP.NET Core allow code to run before or after specific stages in the request processing pipeline.

Built-in filters handle tasks such as:
Authorization, preventing access to resources a user isn't authorized for.
Response caching, short-circuiting the request pipeline to return a cached response.

Custom filters can be created to handle cross-cutting concerns. 
Examples of cross-cutting concerns include error handling, caching, configuration, authorization, and logging. 
Filters avoid duplicating code. For example, an error handling exception filter could consolidate error handling.

This document applies to Razor Pages, API controllers, and controllers with views. Filters don't work directly with Razor components. A filter can only indirectly affect a component when:

The component is embedded in a page or view.
The page or controller and view uses the filter.
